
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightUPLUSUMINUSAND ARROW ASSIGN BEGIN BOOL_LITERAL BREAK COLOR_LITERAL COMMA COND COND_ELSE CONTINUE DEFINE DELIM DIV END EQ FLOAT_LITERAL FOR_STMT FOR_STMT_BY FOR_STMT_TO GE GT ID IF_COND IF_COND_ELSE INT_LITERAL LE LPAR LSQBR LT MINUS MOD MUL NEQ NOT OR PLUS RPAR RSQBR STR_LITERALstatement_list :\n                      | statement\n                      | statement_list statementstatement : fun_def_stmt\n                 | expression_stmt\n                 | loop_break_stmt\n                 | loop_continue_stmtloop_break_stmt : BREAK DELIMloop_continue_stmt : CONTINUE DELIMexpression_stmt : simple_expression DELIM\n                       | complex_expression\n                       | var_def_stmt\n                       | var_defs_stmt\n                       | var_assign_stmtvar_assign_stmt : ID ASSIGN expression DELIMvar_def_stmt : var_def DELIM\n                    | var_def2var_def : ID DEFINE simple_expressionvar_def2 : ID DEFINE complex_expressionvar_defs_stmt : LSQBR id_list RSQBR DEFINE LSQBR simple_expr_list RSQBR DELIMid_list : ID\n               | id_list COMMA IDexpression : simple_expression\n                  | complex_expressionsimple_expr_list : simple_expression\n                        | simple_expr_list COMMA simple_expression\n                        | id_list\n                        | id_list COMMA simple_expressionsimple_expression : or_expr\n                         | or_expr COND simple_expression COND_ELSE simple_expressionor_expr : and_expr\n               | or_expr OR and_exprand_expr : eq_expr\n                | and_expr AND eq_expreq_expr : cmp_expr\n               | cmp_expr EQ cmp_expr\n               | cmp_expr NEQ cmp_exprcmp_expr : add_expr\n                | add_expr GT add_expr\n                | add_expr GE add_expr\n                | add_expr LT add_expr\n                | add_expr LE add_expradd_expr : mul_expr\n                | add_expr PLUS mul_expr\n                | add_expr MINUS mul_exprmul_expr : unary_expr\n                | mul_expr MUL unary_expr\n                | mul_expr DIV unary_expr\n                | mul_expr MOD unary_exprunary_expr : sqbr_expr\n                  | NOT sqbr_expr\n                  | PLUS sqbr_expr %prec UPLUS\n                  | MINUS sqbr_expr %prec UMINUSsqbr_expr : atom\n                 | atom LSQBR simple_expression RSQBRatom : fun_call\n            | var_ref\n            | literal\n            | LPAR simple_expression RPARvar_ref : IDfun_call : fun_call0\n                | fun_call1\n                | fun_call2\n                | fun_call3\n                | fun_call4\n                | fun_call5fun_call0 : ID LPAR RPARfun_call1 : ID LPAR id_list RPARfun_call2 : ID LPAR simple_expr_list RPARfun_call3 : ID LPAR kw_arg_list RPARfun_call4 : ID LPAR id_list COMMA kw_arg_list RPARfun_call5 : ID LPAR simple_expr_list COMMA kw_arg_list RPARkw_arg_list : kw_arg\n                   | kw_arg_list COMMA kw_argkw_arg : ID DEFINE simple_expressionliteral : INT_LITERAL\n               | FLOAT_LITERAL\n               | STR_LITERAL\n               | BOOL_LITERAL\n               | COLOR_LITERAL\n               | list_literallist_literal : LSQBR simple_expr_list RSQBRcomplex_expression : if_expr\n                          | for_exprif_expr : IF_COND simple_expression stmts_block\n               | IF_COND simple_expression stmts_block IF_COND_ELSE stmts_blockfor_expr : FOR_STMT var_def FOR_STMT_TO simple_expression stmts_block\n                | FOR_STMT var_def FOR_STMT_TO simple_expression FOR_STMT_BYstmts_block : BEGIN statement_list ENDfun_def_stmt : fun_def_stmt_1\n                    | fun_def_stmt_mfun_def_stmt_1 : ID LPAR id_list RPAR ARROW simple_expression DELIMfun_def_stmt_m : ID LPAR id_list RPAR ARROW stmts_block'
    
_lr_action_items = {'BREAK':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,22,52,53,54,55,64,98,109,110,132,141,155,156,157,158,160,164,166,],[14,14,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,-83,-84,-17,-3,-10,-8,-9,-16,-19,-85,14,-15,14,-86,-89,-87,-88,-93,-92,-20,]),'CONTINUE':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,22,52,53,54,55,64,98,109,110,132,141,155,156,157,158,160,164,166,],[15,15,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,-83,-84,-17,-3,-10,-8,-9,-16,-19,-85,15,-15,15,-86,-89,-87,-88,-93,-92,-20,]),'ID':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,23,25,26,31,32,35,52,53,54,55,56,57,58,60,62,63,64,69,73,74,75,76,77,78,79,80,81,82,83,87,98,101,105,107,109,110,111,112,125,127,129,131,132,133,135,141,145,154,155,156,157,158,160,164,166,],[16,16,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,61,-83,-84,-17,67,61,72,61,61,61,-3,-10,-8,-9,88,61,61,67,61,61,-16,61,61,61,61,61,61,61,61,61,61,61,61,61,-19,88,137,61,-85,16,61,61,61,146,148,151,-15,137,61,16,61,67,-86,-89,-87,-88,-93,-92,-20,]),'LSQBR':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,22,23,25,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,67,69,73,74,75,76,77,78,79,80,81,82,83,87,88,90,98,99,101,105,106,107,109,110,111,112,125,126,127,128,129,130,132,133,135,136,137,141,145,146,148,152,154,155,156,157,158,160,161,162,164,166,],[23,23,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,-60,60,-83,-84,-17,60,60,60,60,60,87,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-3,-10,-8,-9,60,60,60,60,-60,60,60,-16,-60,60,60,60,60,60,60,60,60,60,60,60,60,60,-60,-67,-19,-59,60,60,-82,60,-85,23,60,60,60,-68,60,-69,60,-70,-15,60,60,154,-60,23,60,-60,-60,-68,60,-86,-89,-87,-88,-93,-71,-72,-92,-20,]),'IF_COND':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,22,52,53,54,55,57,58,64,98,109,110,132,141,155,156,157,158,160,164,166,],[25,25,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,-83,-84,-17,-3,-10,-8,-9,25,25,-16,-19,-85,25,-15,25,-86,-89,-87,-88,-93,-92,-20,]),'FOR_STMT':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,22,52,53,54,55,57,58,64,98,109,110,132,141,155,156,157,158,160,164,166,],[26,26,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,-83,-84,-17,-3,-10,-8,-9,26,26,-16,-19,-85,26,-15,26,-86,-89,-87,-88,-93,-92,-20,]),'NOT':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,23,25,52,53,54,55,56,57,58,60,62,63,64,69,73,74,75,76,77,78,79,80,81,82,83,87,98,101,105,107,109,110,111,112,125,127,129,132,133,135,141,145,154,155,156,157,158,160,164,166,],[35,35,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,35,-83,-84,-17,35,35,-3,-10,-8,-9,35,35,35,35,35,35,-16,35,35,35,35,35,35,35,35,35,35,35,35,35,-19,35,35,35,-85,35,35,35,35,35,35,-15,35,35,35,35,35,-86,-89,-87,-88,-93,-92,-20,]),'PLUS':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,22,23,25,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,67,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,98,99,101,105,106,107,109,110,111,112,115,116,117,118,119,120,121,122,123,125,126,127,128,129,130,132,133,135,137,141,143,145,146,148,152,154,155,156,157,158,160,161,162,164,166,],[31,31,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,-60,31,-83,-84,-17,31,31,79,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-3,-10,-8,-9,31,31,31,31,-60,31,31,-16,-60,31,31,31,31,31,31,31,31,31,31,31,31,-52,-53,-51,31,-60,-67,-19,-59,31,31,-82,31,-85,31,31,31,79,79,79,79,-44,-45,-47,-48,-49,31,-68,31,-69,31,-70,-15,31,31,-60,31,-55,31,-60,-60,-68,31,-86,-89,-87,-88,-93,-71,-72,-92,-20,]),'MINUS':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,22,23,25,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,67,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,98,99,101,105,106,107,109,110,111,112,115,116,117,118,119,120,121,122,123,125,126,127,128,129,130,132,133,135,137,141,143,145,146,148,152,154,155,156,157,158,160,161,162,164,166,],[32,32,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,-60,32,-83,-84,-17,32,32,80,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-3,-10,-8,-9,32,32,32,32,-60,32,32,-16,-60,32,32,32,32,32,32,32,32,32,32,32,32,-52,-53,-51,32,-60,-67,-19,-59,32,32,-82,32,-85,32,32,32,80,80,80,80,-44,-45,-47,-48,-49,32,-68,32,-69,32,-70,-15,32,32,-60,32,-55,32,-60,-60,-68,32,-86,-89,-87,-88,-93,-71,-72,-92,-20,]),'LPAR':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,22,23,25,31,32,35,52,53,54,55,56,57,58,60,61,62,63,64,67,69,73,74,75,76,77,78,79,80,81,82,83,87,88,98,101,105,107,109,110,111,112,125,127,129,132,133,135,137,141,145,146,148,154,155,156,157,158,160,164,166,],[17,17,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,56,17,-83,-84,-17,17,17,17,17,17,-3,-10,-8,-9,17,17,17,17,101,17,17,-16,101,17,17,17,17,17,17,17,17,17,17,17,17,17,101,-19,17,17,17,-85,17,17,17,17,17,17,-15,17,17,101,17,17,101,101,17,-86,-89,-87,-88,-93,-92,-20,]),'INT_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,23,25,31,32,35,52,53,54,55,56,57,58,60,62,63,64,69,73,74,75,76,77,78,79,80,81,82,83,87,98,101,105,107,109,110,111,112,125,127,129,132,133,135,141,145,154,155,156,157,158,160,164,166,],[46,46,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,46,-83,-84,-17,46,46,46,46,46,-3,-10,-8,-9,46,46,46,46,46,46,-16,46,46,46,46,46,46,46,46,46,46,46,46,46,-19,46,46,46,-85,46,46,46,46,46,46,-15,46,46,46,46,46,-86,-89,-87,-88,-93,-92,-20,]),'FLOAT_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,23,25,31,32,35,52,53,54,55,56,57,58,60,62,63,64,69,73,74,75,76,77,78,79,80,81,82,83,87,98,101,105,107,109,110,111,112,125,127,129,132,133,135,141,145,154,155,156,157,158,160,164,166,],[47,47,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,47,-83,-84,-17,47,47,47,47,47,-3,-10,-8,-9,47,47,47,47,47,47,-16,47,47,47,47,47,47,47,47,47,47,47,47,47,-19,47,47,47,-85,47,47,47,47,47,47,-15,47,47,47,47,47,-86,-89,-87,-88,-93,-92,-20,]),'STR_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,23,25,31,32,35,52,53,54,55,56,57,58,60,62,63,64,69,73,74,75,76,77,78,79,80,81,82,83,87,98,101,105,107,109,110,111,112,125,127,129,132,133,135,141,145,154,155,156,157,158,160,164,166,],[48,48,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,48,-83,-84,-17,48,48,48,48,48,-3,-10,-8,-9,48,48,48,48,48,48,-16,48,48,48,48,48,48,48,48,48,48,48,48,48,-19,48,48,48,-85,48,48,48,48,48,48,-15,48,48,48,48,48,-86,-89,-87,-88,-93,-92,-20,]),'BOOL_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,23,25,31,32,35,52,53,54,55,56,57,58,60,62,63,64,69,73,74,75,76,77,78,79,80,81,82,83,87,98,101,105,107,109,110,111,112,125,127,129,132,133,135,141,145,154,155,156,157,158,160,164,166,],[49,49,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,49,-83,-84,-17,49,49,49,49,49,-3,-10,-8,-9,49,49,49,49,49,49,-16,49,49,49,49,49,49,49,49,49,49,49,49,49,-19,49,49,49,-85,49,49,49,49,49,49,-15,49,49,49,49,49,-86,-89,-87,-88,-93,-92,-20,]),'COLOR_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,23,25,31,32,35,52,53,54,55,56,57,58,60,62,63,64,69,73,74,75,76,77,78,79,80,81,82,83,87,98,101,105,107,109,110,111,112,125,127,129,132,133,135,141,145,154,155,156,157,158,160,164,166,],[50,50,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,50,-83,-84,-17,50,50,50,50,50,-3,-10,-8,-9,50,50,50,50,50,50,-16,50,50,50,50,50,50,50,50,50,50,50,50,50,-19,50,50,50,-85,50,50,50,50,50,50,-15,50,50,50,50,50,-86,-89,-87,-88,-93,-92,-20,]),'$end':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,22,52,53,54,55,64,98,109,132,155,156,157,158,160,164,166,],[-1,0,-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,-83,-84,-17,-3,-10,-8,-9,-16,-19,-85,-15,-86,-89,-87,-88,-93,-92,-20,]),'END':([2,3,4,5,6,7,8,10,11,12,13,19,20,22,52,53,54,55,64,98,109,110,132,141,155,156,157,158,160,164,166,],[-2,-4,-5,-6,-7,-90,-91,-11,-12,-13,-14,-83,-84,-17,-3,-10,-8,-9,-16,-19,-85,-1,-15,156,-86,-89,-87,-88,-93,-92,-20,]),'DELIM':([9,14,15,16,18,19,20,21,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,84,85,86,90,94,95,96,97,99,103,106,108,109,113,114,115,116,117,118,119,120,121,122,123,126,128,130,143,152,153,155,156,157,158,159,161,162,165,],[53,54,55,-60,-29,-83,-84,64,-31,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-52,-53,-51,-67,132,-23,-24,-18,-59,-32,-82,-34,-85,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,-68,-69,-70,-55,-68,-30,-86,-89,-87,-88,164,-71,-72,166,]),'ASSIGN':([16,],[57,]),'DEFINE':([16,72,88,104,146,148,151,],[58,112,125,136,125,125,125,]),'MUL':([16,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,106,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,81,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-82,81,81,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'DIV':([16,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,106,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,82,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-82,82,82,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'MOD':([16,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,106,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,83,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-82,83,83,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'GT':([16,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,106,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,75,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-82,-44,-45,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'GE':([16,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,106,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,76,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-82,-44,-45,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'LT':([16,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,106,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,77,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-82,-44,-45,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'LE':([16,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,106,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,78,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-82,-44,-45,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'EQ':([16,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,106,115,116,117,118,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,73,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-82,-39,-40,-41,-42,-44,-45,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'NEQ':([16,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,106,115,116,117,118,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,74,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-82,-39,-40,-41,-42,-44,-45,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'AND':([16,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,103,106,108,113,114,115,116,117,118,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,69,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,69,-82,-34,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'COND':([16,18,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,103,106,108,113,114,115,116,117,118,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,62,-31,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-32,-82,-34,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'OR':([16,18,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,67,84,85,86,88,90,99,103,106,108,113,114,115,116,117,118,119,120,121,122,123,126,128,130,137,143,146,148,152,161,162,],[-60,63,-31,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-60,-52,-53,-51,-60,-67,-59,-32,-82,-34,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,-68,-69,-70,-60,-55,-60,-60,-68,-71,-72,]),'RPAR':([18,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,56,59,61,68,84,85,86,88,89,90,91,92,93,99,101,103,106,108,113,114,115,116,117,118,119,120,121,122,123,128,130,134,138,139,143,144,146,147,148,149,150,152,153,161,162,],[-29,-31,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,90,99,-60,-25,-52,-53,-51,-21,126,-67,128,130,-73,-59,90,-32,-82,-34,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,-69,-70,152,-28,-26,-55,-75,-22,161,-60,162,-74,-68,-30,-71,-72,]),'RSQBR':([18,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,65,66,67,68,84,85,86,90,99,100,103,106,108,113,114,115,116,117,118,119,120,121,122,123,124,128,130,137,138,139,143,152,153,161,162,163,],[-29,-31,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,104,106,-21,-25,-52,-53,-51,-67,-59,-27,-32,-82,-34,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,143,-69,-70,-22,-28,-26,-55,-68,-30,-71,-72,165,]),'COMMA':([18,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,65,66,67,68,84,85,86,88,89,90,91,92,93,99,100,103,106,108,113,114,115,116,117,118,119,120,121,122,123,128,130,134,137,138,139,143,144,146,147,148,149,150,152,153,161,162,163,],[-29,-31,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,105,107,-21,-25,-52,-53,-51,-21,127,-67,129,131,-73,-59,133,-32,-82,-34,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,-69,-70,127,-22,-28,-26,-55,-75,-22,131,-60,131,-74,-68,-30,-71,-72,107,]),'BEGIN':([18,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,70,84,85,86,90,99,103,106,108,113,114,115,116,117,118,119,120,121,122,123,128,130,140,142,143,145,152,153,161,162,],[-29,-31,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,110,-52,-53,-51,-67,-59,-32,-82,-34,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,-69,-70,110,110,-55,110,-68,-30,-71,-72,]),'COND_ELSE':([18,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,84,85,86,90,99,102,103,106,108,113,114,115,116,117,118,119,120,121,122,123,128,130,143,152,153,161,162,],[-29,-31,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-52,-53,-51,-67,-59,135,-32,-82,-34,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,-69,-70,-55,-68,-30,-71,-72,]),'FOR_STMT_BY':([18,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,84,85,86,90,99,103,106,108,113,114,115,116,117,118,119,120,121,122,123,128,130,142,143,152,153,161,162,],[-29,-31,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,-52,-53,-51,-67,-59,-32,-82,-34,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,-69,-70,158,-55,-68,-30,-71,-72,]),'FOR_STMT_TO':([18,24,27,28,29,30,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61,71,84,85,86,90,97,99,103,106,108,113,114,115,116,117,118,119,120,121,122,123,128,130,143,152,153,161,162,],[-29,-31,-33,-35,-38,-43,-46,-50,-54,-56,-57,-58,-61,-62,-63,-64,-65,-66,-76,-77,-78,-79,-80,-81,-60,111,-52,-53,-51,-67,-18,-59,-32,-82,-34,-36,-37,-39,-40,-41,-42,-44,-45,-47,-48,-49,-69,-70,-55,-68,-30,-71,-72,]),'IF_COND_ELSE':([109,156,],[140,-89,]),'ARROW':([126,],[145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,110,],[1,141,]),'statement':([0,1,110,141,],[2,52,2,52,]),'fun_def_stmt':([0,1,110,141,],[3,3,3,3,]),'expression_stmt':([0,1,110,141,],[4,4,4,4,]),'loop_break_stmt':([0,1,110,141,],[5,5,5,5,]),'loop_continue_stmt':([0,1,110,141,],[6,6,6,6,]),'fun_def_stmt_1':([0,1,110,141,],[7,7,7,7,]),'fun_def_stmt_m':([0,1,110,141,],[8,8,8,8,]),'simple_expression':([0,1,17,23,25,56,57,58,60,62,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[9,9,59,68,70,68,95,97,68,102,124,68,138,139,9,142,97,144,138,139,138,153,9,159,68,]),'complex_expression':([0,1,57,58,110,141,],[10,10,96,98,10,10,]),'var_def_stmt':([0,1,110,141,],[11,11,11,11,]),'var_defs_stmt':([0,1,110,141,],[12,12,12,12,]),'var_assign_stmt':([0,1,110,141,],[13,13,13,13,]),'or_expr':([0,1,17,23,25,56,57,58,60,62,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'if_expr':([0,1,57,58,110,141,],[19,19,19,19,19,19,]),'for_expr':([0,1,57,58,110,141,],[20,20,20,20,20,20,]),'var_def':([0,1,26,110,141,],[21,21,71,21,21,]),'var_def2':([0,1,110,141,],[22,22,22,22,]),'and_expr':([0,1,17,23,25,56,57,58,60,62,63,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[24,24,24,24,24,24,24,24,24,24,103,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'eq_expr':([0,1,17,23,25,56,57,58,60,62,63,69,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[27,27,27,27,27,27,27,27,27,27,27,108,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'cmp_expr':([0,1,17,23,25,56,57,58,60,62,63,69,73,74,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[28,28,28,28,28,28,28,28,28,28,28,28,113,114,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'add_expr':([0,1,17,23,25,56,57,58,60,62,63,69,73,74,75,76,77,78,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,115,116,117,118,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'mul_expr':([0,1,17,23,25,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,119,120,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'unary_expr':([0,1,17,23,25,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,121,122,123,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'sqbr_expr':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[34,34,34,34,34,84,85,86,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'atom':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'fun_call':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'var_ref':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'literal':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'fun_call0':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'fun_call1':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'fun_call2':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'fun_call3':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'fun_call4':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'fun_call5':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'list_literal':([0,1,17,23,25,31,32,35,56,57,58,60,62,63,69,73,74,75,76,77,78,79,80,81,82,83,87,101,105,107,110,111,112,125,127,129,133,135,141,145,154,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'id_list':([23,56,60,101,154,],[65,89,100,134,100,]),'simple_expr_list':([23,56,60,101,154,],[66,91,66,91,163,]),'kw_arg_list':([56,101,127,129,],[92,92,147,149,]),'kw_arg':([56,101,127,129,131,],[93,93,93,93,150,]),'expression':([57,],[94,]),'stmts_block':([70,140,142,145,],[109,155,157,160,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement_list","S'",1,None,None,None),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','parser.py',30),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> fun_def_stmt','statement',1,'p_statement','parser.py',41),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',42),
  ('statement -> loop_break_stmt','statement',1,'p_statement','parser.py',43),
  ('statement -> loop_continue_stmt','statement',1,'p_statement','parser.py',44),
  ('loop_break_stmt -> BREAK DELIM','loop_break_stmt',2,'p_loop_break_stmt','parser.py',49),
  ('loop_continue_stmt -> CONTINUE DELIM','loop_continue_stmt',2,'p_loop_continue_stmt','parser.py',53),
  ('expression_stmt -> simple_expression DELIM','expression_stmt',2,'p_expression_stmt','parser.py',58),
  ('expression_stmt -> complex_expression','expression_stmt',1,'p_expression_stmt','parser.py',59),
  ('expression_stmt -> var_def_stmt','expression_stmt',1,'p_expression_stmt','parser.py',60),
  ('expression_stmt -> var_defs_stmt','expression_stmt',1,'p_expression_stmt','parser.py',61),
  ('expression_stmt -> var_assign_stmt','expression_stmt',1,'p_expression_stmt','parser.py',62),
  ('var_assign_stmt -> ID ASSIGN expression DELIM','var_assign_stmt',4,'p_var_assign_stmt','parser.py',66),
  ('var_def_stmt -> var_def DELIM','var_def_stmt',2,'p_var_def_stmt1','parser.py',70),
  ('var_def_stmt -> var_def2','var_def_stmt',1,'p_var_def_stmt1','parser.py',71),
  ('var_def -> ID DEFINE simple_expression','var_def',3,'p_var_def','parser.py',75),
  ('var_def2 -> ID DEFINE complex_expression','var_def2',3,'p_var_def2','parser.py',79),
  ('var_defs_stmt -> LSQBR id_list RSQBR DEFINE LSQBR simple_expr_list RSQBR DELIM','var_defs_stmt',8,'p_var_defs_stmt','parser.py',83),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',87),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',88),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',93),
  ('expression -> complex_expression','expression',1,'p_expression','parser.py',94),
  ('simple_expr_list -> simple_expression','simple_expr_list',1,'p_simple_expr_list','parser.py',99),
  ('simple_expr_list -> simple_expr_list COMMA simple_expression','simple_expr_list',3,'p_simple_expr_list','parser.py',100),
  ('simple_expr_list -> id_list','simple_expr_list',1,'p_simple_expr_list','parser.py',101),
  ('simple_expr_list -> id_list COMMA simple_expression','simple_expr_list',3,'p_simple_expr_list','parser.py',102),
  ('simple_expression -> or_expr','simple_expression',1,'p_simple_expression','parser.py',128),
  ('simple_expression -> or_expr COND simple_expression COND_ELSE simple_expression','simple_expression',5,'p_simple_expression','parser.py',129),
  ('or_expr -> and_expr','or_expr',1,'p_or_expr','parser.py',136),
  ('or_expr -> or_expr OR and_expr','or_expr',3,'p_or_expr','parser.py',137),
  ('and_expr -> eq_expr','and_expr',1,'p_and_expr','parser.py',141),
  ('and_expr -> and_expr AND eq_expr','and_expr',3,'p_and_expr','parser.py',142),
  ('eq_expr -> cmp_expr','eq_expr',1,'p_eq_expr','parser.py',146),
  ('eq_expr -> cmp_expr EQ cmp_expr','eq_expr',3,'p_eq_expr','parser.py',147),
  ('eq_expr -> cmp_expr NEQ cmp_expr','eq_expr',3,'p_eq_expr','parser.py',148),
  ('cmp_expr -> add_expr','cmp_expr',1,'p_cmp_expr','parser.py',152),
  ('cmp_expr -> add_expr GT add_expr','cmp_expr',3,'p_cmp_expr','parser.py',153),
  ('cmp_expr -> add_expr GE add_expr','cmp_expr',3,'p_cmp_expr','parser.py',154),
  ('cmp_expr -> add_expr LT add_expr','cmp_expr',3,'p_cmp_expr','parser.py',155),
  ('cmp_expr -> add_expr LE add_expr','cmp_expr',3,'p_cmp_expr','parser.py',156),
  ('add_expr -> mul_expr','add_expr',1,'p_add_expr','parser.py',160),
  ('add_expr -> add_expr PLUS mul_expr','add_expr',3,'p_add_expr','parser.py',161),
  ('add_expr -> add_expr MINUS mul_expr','add_expr',3,'p_add_expr','parser.py',162),
  ('mul_expr -> unary_expr','mul_expr',1,'p_mul_expr','parser.py',166),
  ('mul_expr -> mul_expr MUL unary_expr','mul_expr',3,'p_mul_expr','parser.py',167),
  ('mul_expr -> mul_expr DIV unary_expr','mul_expr',3,'p_mul_expr','parser.py',168),
  ('mul_expr -> mul_expr MOD unary_expr','mul_expr',3,'p_mul_expr','parser.py',169),
  ('unary_expr -> sqbr_expr','unary_expr',1,'p_unary_expr','parser.py',176),
  ('unary_expr -> NOT sqbr_expr','unary_expr',2,'p_unary_expr','parser.py',177),
  ('unary_expr -> PLUS sqbr_expr','unary_expr',2,'p_unary_expr','parser.py',178),
  ('unary_expr -> MINUS sqbr_expr','unary_expr',2,'p_unary_expr','parser.py',179),
  ('sqbr_expr -> atom','sqbr_expr',1,'p_sqbr_expr','parser.py',186),
  ('sqbr_expr -> atom LSQBR simple_expression RSQBR','sqbr_expr',4,'p_sqbr_expr','parser.py',187),
  ('atom -> fun_call','atom',1,'p_atom','parser.py',191),
  ('atom -> var_ref','atom',1,'p_atom','parser.py',192),
  ('atom -> literal','atom',1,'p_atom','parser.py',193),
  ('atom -> LPAR simple_expression RPAR','atom',3,'p_atom','parser.py',194),
  ('var_ref -> ID','var_ref',1,'p_var_ref','parser.py',201),
  ('fun_call -> fun_call0','fun_call',1,'p_fun_call','parser.py',205),
  ('fun_call -> fun_call1','fun_call',1,'p_fun_call','parser.py',206),
  ('fun_call -> fun_call2','fun_call',1,'p_fun_call','parser.py',207),
  ('fun_call -> fun_call3','fun_call',1,'p_fun_call','parser.py',208),
  ('fun_call -> fun_call4','fun_call',1,'p_fun_call','parser.py',209),
  ('fun_call -> fun_call5','fun_call',1,'p_fun_call','parser.py',210),
  ('fun_call0 -> ID LPAR RPAR','fun_call0',3,'p_fun_call0','parser.py',223),
  ('fun_call1 -> ID LPAR id_list RPAR','fun_call1',4,'p_fun_call1','parser.py',227),
  ('fun_call2 -> ID LPAR simple_expr_list RPAR','fun_call2',4,'p_fun_call2','parser.py',231),
  ('fun_call3 -> ID LPAR kw_arg_list RPAR','fun_call3',4,'p_fun_call3','parser.py',235),
  ('fun_call4 -> ID LPAR id_list COMMA kw_arg_list RPAR','fun_call4',6,'p_fun_call4','parser.py',239),
  ('fun_call5 -> ID LPAR simple_expr_list COMMA kw_arg_list RPAR','fun_call5',6,'p_fun_call5','parser.py',243),
  ('kw_arg_list -> kw_arg','kw_arg_list',1,'p_kw_arg_list','parser.py',247),
  ('kw_arg_list -> kw_arg_list COMMA kw_arg','kw_arg_list',3,'p_kw_arg_list','parser.py',248),
  ('kw_arg -> ID DEFINE simple_expression','kw_arg',3,'p_kw_arg','parser.py',257),
  ('literal -> INT_LITERAL','literal',1,'p_literal','parser.py',261),
  ('literal -> FLOAT_LITERAL','literal',1,'p_literal','parser.py',262),
  ('literal -> STR_LITERAL','literal',1,'p_literal','parser.py',263),
  ('literal -> BOOL_LITERAL','literal',1,'p_literal','parser.py',264),
  ('literal -> COLOR_LITERAL','literal',1,'p_literal','parser.py',265),
  ('literal -> list_literal','literal',1,'p_literal','parser.py',266),
  ('list_literal -> LSQBR simple_expr_list RSQBR','list_literal',3,'p_list_leteral','parser.py',270),
  ('complex_expression -> if_expr','complex_expression',1,'p_complex_expression','parser.py',276),
  ('complex_expression -> for_expr','complex_expression',1,'p_complex_expression','parser.py',277),
  ('if_expr -> IF_COND simple_expression stmts_block','if_expr',3,'p_if_expr','parser.py',281),
  ('if_expr -> IF_COND simple_expression stmts_block IF_COND_ELSE stmts_block','if_expr',5,'p_if_expr','parser.py',282),
  ('for_expr -> FOR_STMT var_def FOR_STMT_TO simple_expression stmts_block','for_expr',5,'p_for_expr','parser.py',289),
  ('for_expr -> FOR_STMT var_def FOR_STMT_TO simple_expression FOR_STMT_BY','for_expr',5,'p_for_expr','parser.py',290),
  ('stmts_block -> BEGIN statement_list END','stmts_block',3,'p_stmts_block','parser.py',294),
  ('fun_def_stmt -> fun_def_stmt_1','fun_def_stmt',1,'p_fun_def_stmt','parser.py',300),
  ('fun_def_stmt -> fun_def_stmt_m','fun_def_stmt',1,'p_fun_def_stmt','parser.py',301),
  ('fun_def_stmt_1 -> ID LPAR id_list RPAR ARROW simple_expression DELIM','fun_def_stmt_1',7,'p_fun_def_stmt_1','parser.py',305),
  ('fun_def_stmt_m -> ID LPAR id_list RPAR ARROW stmts_block','fun_def_stmt_m',6,'p_fun_def_stmt_m','parser.py',309),
]
