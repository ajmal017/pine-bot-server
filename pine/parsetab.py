
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightUPLUSUMINUSAND ARROW ASSIGN BEGIN BOOL_LITERAL BREAK COLOR_LITERAL COMMA COND COND_ELSE CONTINUE DEFINE DELIM DIV END EQ FLOAT_LITERAL FOR_STMT FOR_STMT_BY FOR_STMT_TO GE GT ID IF_COND IF_COND_ELSE INT_LITERAL LE LPAR LSQBR LT MINUS MOD MUL NEQ NOT OR PLUS RPAR RSQBR STR_LITERALstatement_list :\n                      | statement\n                      | statement_list statementstatement : fun_def_stmt\n                 | expression_stmt\n                 | loop_break_stmt\n                 | loop_continue_stmtloop_break_stmt : BREAK DELIMloop_continue_stmt : CONTINUE DELIMexpression_stmt : simple_expression DELIM\n                       | complex_expression\n                       | var_def_stmt\n                       | var_defs_stmt\n                       | var_assign_stmtvar_assign_stmt : ID ASSIGN expression DELIMvar_def_stmt : var_def DELIMvar_def : ID DEFINE expressionvar_defs_stmt : LSQBR id_list RSQBR DEFINE LSQBR simple_expr_list RSQBR DELIMid_list : ID\n               | id_list COMMA IDexpression : simple_expression\n                  | complex_expressionsimple_expr_list : simple_expression\n                        | simple_expr_list COMMA simple_expression\n                        | id_list\n                        | id_list COMMA simple_expressionsimple_expression : or_expr\n                         | or_expr COND simple_expression COND_ELSE simple_expressionor_expr : and_expr\n               | or_expr OR and_exprand_expr : eq_expr\n                | and_expr AND eq_expreq_expr : cmp_expr\n               | cmp_expr EQ cmp_expr\n               | cmp_expr NEQ cmp_exprcmp_expr : add_expr\n                | add_expr GT add_expr\n                | add_expr GE add_expr\n                | add_expr LT add_expr\n                | add_expr LE add_expradd_expr : mul_expr\n                | add_expr PLUS mul_expr\n                | add_expr MINUS mul_exprmul_expr : unary_expr\n                | mul_expr MUL unary_expr\n                | mul_expr DIV unary_expr\n                | mul_expr MOD unary_exprunary_expr : sqbr_expr\n                  | NOT sqbr_expr\n                  | PLUS sqbr_expr %prec UPLUS\n                  | MINUS sqbr_expr %prec UMINUSsqbr_expr : atom\n                 | atom LSQBR simple_expression RSQBRatom : fun_call\n            | var_ref\n            | literal\n            | LPAR simple_expression RPARvar_ref : IDfun_call : ID LPAR fun_arg_list RPARfun_arg_list : \n                    | simple_expr_list\n                    | kw_arg_list\n                    | simple_expr_list COMMA kw_arg_list\n                    | id_list COMMA kw_arg_listkw_arg_list : kw_arg\n                   | kw_arg_list COMMA kw_argkw_arg : ID DEFINE simple_expressionliteral : INT_LITERAL\n               | FLOAT_LITERAL\n               | STR_LITERAL\n               | BOOL_LITERAL\n               | COLOR_LITERAL\n               | list_literallist_literal : LSQBR simple_expr_list RSQBRcomplex_expression : if_expr\n                          | for_exprif_expr : IF_COND simple_expression stmts_block\n               | IF_COND simple_expression stmts_block IF_COND_ELSE stmts_blockfor_expr : FOR_STMT var_def FOR_STMT_TO simple_expression stmts_block\n                | FOR_STMT var_def FOR_STMT_TO simple_expression FOR_STMT_BYstmts_block : BEGIN statement_list ENDfun_def_stmt : fun_def_stmt_1\n                    | fun_def_stmt_mfun_def_stmt_1 : ID LPAR id_list RPAR ARROW simple_expression DELIMfun_def_stmt_m : ID LPAR id_list RPAR ARROW stmts_block'
    
_lr_action_items = {'BREAK':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,45,46,47,48,57,101,102,122,131,145,146,147,148,150,152,154,],[14,14,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,-75,-76,-3,-10,-8,-9,-16,-77,14,-15,14,-78,-81,-79,-80,-85,-84,-18,]),'CONTINUE':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,45,46,47,48,57,101,102,122,131,145,146,147,148,150,152,154,],[15,15,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,-75,-76,-3,-10,-8,-9,-16,-77,15,-15,15,-78,-81,-79,-80,-85,-84,-18,]),'ID':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,24,25,30,31,34,45,46,47,48,49,50,51,53,55,56,57,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,101,102,103,116,118,120,121,122,123,125,131,135,142,144,145,146,147,148,150,152,154,],[16,16,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,54,-75,-76,60,54,65,54,54,54,-3,-10,-8,-9,81,54,54,60,54,54,-16,54,54,54,54,54,54,54,54,54,54,54,54,54,81,127,54,-77,16,54,54,136,139,141,-15,127,54,16,54,136,60,-78,-81,-79,-80,-85,-84,-18,]),'LSQBR':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,22,24,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,60,62,66,67,68,69,70,71,72,73,74,75,76,80,81,91,93,97,98,99,101,102,103,116,118,119,120,122,123,125,126,127,131,135,136,139,142,144,145,146,147,148,150,152,154,],[22,22,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,-58,53,-75,-76,53,53,53,53,53,80,-54,-55,-56,-68,-69,-70,-71,-72,-73,-3,-10,-8,-9,53,53,53,53,-58,53,53,-16,-58,53,53,53,53,53,53,53,53,53,53,53,53,53,-58,-57,53,53,-74,53,-77,22,53,53,53,-59,53,-15,53,53,144,-58,22,53,-58,-58,53,53,-78,-81,-79,-80,-85,-84,-18,]),'IF_COND':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,45,46,47,48,50,51,57,101,102,122,131,145,146,147,148,150,152,154,],[24,24,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,-75,-76,-3,-10,-8,-9,24,24,-16,-77,24,-15,24,-78,-81,-79,-80,-85,-84,-18,]),'FOR_STMT':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,45,46,47,48,50,51,57,101,102,122,131,145,146,147,148,150,152,154,],[25,25,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,-75,-76,-3,-10,-8,-9,25,25,-16,-77,25,-15,25,-78,-81,-79,-80,-85,-84,-18,]),'NOT':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,24,45,46,47,48,49,50,51,53,55,56,57,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,101,102,103,116,118,120,122,123,125,131,135,142,144,145,146,147,148,150,152,154,],[34,34,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,34,-75,-76,34,34,-3,-10,-8,-9,34,34,34,34,34,34,-16,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-77,34,34,34,34,34,-15,34,34,34,34,34,34,-78,-81,-79,-80,-85,-84,-18,]),'PLUS':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,22,24,28,29,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,60,62,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,91,93,97,98,99,101,102,103,106,107,108,109,110,111,112,113,114,116,118,119,120,122,123,125,127,131,133,135,136,139,142,144,145,146,147,148,150,152,154,],[30,30,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,-58,30,-75,-76,30,30,72,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-3,-10,-8,-9,30,30,30,30,-58,30,30,-16,-58,30,30,30,30,30,30,30,30,30,30,30,30,-50,-51,-49,30,-58,-57,30,30,-74,30,-77,30,30,72,72,72,72,-42,-43,-45,-46,-47,30,30,-59,30,-15,30,30,-58,30,-53,30,-58,-58,30,30,-78,-81,-79,-80,-85,-84,-18,]),'MINUS':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,22,24,28,29,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,60,62,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,91,93,97,98,99,101,102,103,106,107,108,109,110,111,112,113,114,116,118,119,120,122,123,125,127,131,133,135,136,139,142,144,145,146,147,148,150,152,154,],[31,31,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,-58,31,-75,-76,31,31,73,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-3,-10,-8,-9,31,31,31,31,-58,31,31,-16,-58,31,31,31,31,31,31,31,31,31,31,31,31,-50,-51,-49,31,-58,-57,31,31,-74,31,-77,31,31,73,73,73,73,-42,-43,-45,-46,-47,31,31,-59,31,-15,31,31,-58,31,-53,31,-58,-58,31,31,-78,-81,-79,-80,-85,-84,-18,]),'LPAR':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,22,24,30,31,34,45,46,47,48,49,50,51,53,54,55,56,57,60,62,66,67,68,69,70,71,72,73,74,75,76,80,81,93,97,99,101,102,103,116,118,120,122,123,125,127,131,135,136,139,142,144,145,146,147,148,150,152,154,],[17,17,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,49,17,-75,-76,17,17,17,17,17,-3,-10,-8,-9,17,17,17,17,93,17,17,-16,93,17,17,17,17,17,17,17,17,17,17,17,17,17,93,17,17,17,-77,17,17,17,17,17,-15,17,17,93,17,17,93,93,17,17,-78,-81,-79,-80,-85,-84,-18,]),'INT_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,24,30,31,34,45,46,47,48,49,50,51,53,55,56,57,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,101,102,103,116,118,120,122,123,125,131,135,142,144,145,146,147,148,150,152,154,],[39,39,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,39,-75,-76,39,39,39,39,39,-3,-10,-8,-9,39,39,39,39,39,39,-16,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-77,39,39,39,39,39,-15,39,39,39,39,39,39,-78,-81,-79,-80,-85,-84,-18,]),'FLOAT_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,24,30,31,34,45,46,47,48,49,50,51,53,55,56,57,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,101,102,103,116,118,120,122,123,125,131,135,142,144,145,146,147,148,150,152,154,],[40,40,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,40,-75,-76,40,40,40,40,40,-3,-10,-8,-9,40,40,40,40,40,40,-16,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-77,40,40,40,40,40,-15,40,40,40,40,40,40,-78,-81,-79,-80,-85,-84,-18,]),'STR_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,24,30,31,34,45,46,47,48,49,50,51,53,55,56,57,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,101,102,103,116,118,120,122,123,125,131,135,142,144,145,146,147,148,150,152,154,],[41,41,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,41,-75,-76,41,41,41,41,41,-3,-10,-8,-9,41,41,41,41,41,41,-16,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-77,41,41,41,41,41,-15,41,41,41,41,41,41,-78,-81,-79,-80,-85,-84,-18,]),'BOOL_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,24,30,31,34,45,46,47,48,49,50,51,53,55,56,57,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,101,102,103,116,118,120,122,123,125,131,135,142,144,145,146,147,148,150,152,154,],[42,42,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,42,-75,-76,42,42,42,42,42,-3,-10,-8,-9,42,42,42,42,42,42,-16,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-77,42,42,42,42,42,-15,42,42,42,42,42,42,-78,-81,-79,-80,-85,-84,-18,]),'COLOR_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,24,30,31,34,45,46,47,48,49,50,51,53,55,56,57,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,101,102,103,116,118,120,122,123,125,131,135,142,144,145,146,147,148,150,152,154,],[43,43,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,43,-75,-76,43,43,43,43,43,-3,-10,-8,-9,43,43,43,43,43,43,-16,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-77,43,43,43,43,43,-15,43,43,43,43,43,43,-78,-81,-79,-80,-85,-84,-18,]),'$end':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,45,46,47,48,57,101,122,145,146,147,148,150,152,154,],[-1,0,-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,-75,-76,-3,-10,-8,-9,-16,-77,-15,-78,-81,-79,-80,-85,-84,-18,]),'END':([2,3,4,5,6,7,8,10,11,12,13,19,20,45,46,47,48,57,101,102,122,131,145,146,147,148,150,152,154,],[-2,-4,-5,-6,-7,-82,-83,-11,-12,-13,-14,-75,-76,-3,-10,-8,-9,-16,-77,-1,-15,146,-78,-81,-79,-80,-85,-84,-18,]),'DELIM':([9,14,15,16,18,19,20,21,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,77,78,79,87,88,89,90,91,95,98,100,101,104,105,106,107,108,109,110,111,112,113,114,119,133,143,145,146,147,148,149,153,],[46,47,48,-58,-27,-75,-76,57,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-50,-51,-49,122,-21,-22,-17,-57,-30,-74,-32,-77,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-28,-78,-81,-79,-80,152,154,]),'ASSIGN':([16,],[50,]),'DEFINE':([16,65,81,96,136,139,141,],[51,51,116,126,116,116,116,]),'MUL':([16,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,98,110,111,112,113,114,119,127,133,136,139,],[-58,74,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-74,74,74,-45,-46,-47,-59,-58,-53,-58,-58,]),'DIV':([16,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,98,110,111,112,113,114,119,127,133,136,139,],[-58,75,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-74,75,75,-45,-46,-47,-59,-58,-53,-58,-58,]),'MOD':([16,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,98,110,111,112,113,114,119,127,133,136,139,],[-58,76,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-74,76,76,-45,-46,-47,-59,-58,-53,-58,-58,]),'GT':([16,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,98,110,111,112,113,114,119,127,133,136,139,],[-58,68,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-74,-42,-43,-45,-46,-47,-59,-58,-53,-58,-58,]),'GE':([16,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,98,110,111,112,113,114,119,127,133,136,139,],[-58,69,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-74,-42,-43,-45,-46,-47,-59,-58,-53,-58,-58,]),'LT':([16,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,98,110,111,112,113,114,119,127,133,136,139,],[-58,70,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-74,-42,-43,-45,-46,-47,-59,-58,-53,-58,-58,]),'LE':([16,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,98,110,111,112,113,114,119,127,133,136,139,],[-58,71,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-74,-42,-43,-45,-46,-47,-59,-58,-53,-58,-58,]),'EQ':([16,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,98,106,107,108,109,110,111,112,113,114,119,127,133,136,139,],[-58,66,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-74,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-58,-53,-58,-58,]),'NEQ':([16,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,98,106,107,108,109,110,111,112,113,114,119,127,133,136,139,],[-58,67,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-74,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-58,-53,-58,-58,]),'AND':([16,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,95,98,100,104,105,106,107,108,109,110,111,112,113,114,119,127,133,136,139,],[-58,62,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,62,-74,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-58,-53,-58,-58,]),'COND':([16,18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,95,98,100,104,105,106,107,108,109,110,111,112,113,114,119,127,133,136,139,],[-58,55,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-30,-74,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-58,-53,-58,-58,]),'OR':([16,18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,60,77,78,79,81,91,95,98,100,104,105,106,107,108,109,110,111,112,113,114,119,127,133,136,139,],[-58,56,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-58,-50,-51,-49,-58,-57,-30,-74,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-58,-53,-58,-58,]),'RPAR':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,49,52,54,61,77,78,79,81,82,83,84,85,86,91,93,95,98,100,104,105,106,107,108,109,110,111,112,113,114,119,124,128,129,133,134,136,137,138,139,140,143,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-60,91,-58,-23,-50,-51,-49,-19,117,119,-61,-62,-65,-57,-60,-30,-74,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-25,-26,-24,-53,-67,-20,-64,-63,-58,-66,-28,]),'RSQBR':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,58,59,60,61,77,78,79,91,92,95,98,100,104,105,106,107,108,109,110,111,112,113,114,115,119,127,128,129,133,143,151,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,96,98,-19,-23,-50,-51,-49,-57,-25,-30,-74,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,133,-59,-20,-26,-24,-53,-28,153,]),'COMMA':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,58,59,60,61,77,78,79,81,82,84,85,86,91,92,95,98,100,104,105,106,107,108,109,110,111,112,113,114,119,124,127,128,129,133,134,136,137,138,139,140,143,151,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,97,99,-19,-23,-50,-51,-49,-19,118,120,121,-65,-57,123,-30,-74,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,142,-20,-26,-24,-53,-67,-20,121,121,-58,-66,-28,99,]),'BEGIN':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,63,77,78,79,91,95,98,100,104,105,106,107,108,109,110,111,112,113,114,119,130,132,133,135,143,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,102,-50,-51,-49,-57,-30,-74,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,102,102,-53,102,-28,]),'FOR_STMT_TO':([18,19,20,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,64,77,78,79,88,89,90,91,95,98,100,101,104,105,106,107,108,109,110,111,112,113,114,119,133,143,145,146,147,148,],[-27,-75,-76,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,103,-50,-51,-49,-21,-22,-17,-57,-30,-74,-32,-77,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-28,-78,-81,-79,-80,]),'COND_ELSE':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,77,78,79,91,94,95,98,100,104,105,106,107,108,109,110,111,112,113,114,119,133,143,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-50,-51,-49,-57,125,-30,-74,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-28,]),'FOR_STMT_BY':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,44,54,77,78,79,91,95,98,100,104,105,106,107,108,109,110,111,112,113,114,119,132,133,143,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-68,-69,-70,-71,-72,-73,-58,-50,-51,-49,-57,-30,-74,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,148,-53,-28,]),'IF_COND_ELSE':([101,146,],[130,-81,]),'ARROW':([117,],[135,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,102,],[1,131,]),'statement':([0,1,102,131,],[2,45,2,45,]),'fun_def_stmt':([0,1,102,131,],[3,3,3,3,]),'expression_stmt':([0,1,102,131,],[4,4,4,4,]),'loop_break_stmt':([0,1,102,131,],[5,5,5,5,]),'loop_continue_stmt':([0,1,102,131,],[6,6,6,6,]),'fun_def_stmt_1':([0,1,102,131,],[7,7,7,7,]),'fun_def_stmt_m':([0,1,102,131,],[8,8,8,8,]),'simple_expression':([0,1,17,22,24,49,50,51,53,55,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[9,9,52,61,63,61,88,88,61,94,115,61,128,129,9,132,134,128,129,128,143,9,149,128,61,]),'complex_expression':([0,1,50,51,102,131,],[10,10,89,89,10,10,]),'var_def_stmt':([0,1,102,131,],[11,11,11,11,]),'var_defs_stmt':([0,1,102,131,],[12,12,12,12,]),'var_assign_stmt':([0,1,102,131,],[13,13,13,13,]),'or_expr':([0,1,17,22,24,49,50,51,53,55,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'if_expr':([0,1,50,51,102,131,],[19,19,19,19,19,19,]),'for_expr':([0,1,50,51,102,131,],[20,20,20,20,20,20,]),'var_def':([0,1,25,102,131,],[21,21,64,21,21,]),'and_expr':([0,1,17,22,24,49,50,51,53,55,56,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[23,23,23,23,23,23,23,23,23,23,95,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'eq_expr':([0,1,17,22,24,49,50,51,53,55,56,62,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[26,26,26,26,26,26,26,26,26,26,26,100,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'cmp_expr':([0,1,17,22,24,49,50,51,53,55,56,62,66,67,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[27,27,27,27,27,27,27,27,27,27,27,27,104,105,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'add_expr':([0,1,17,22,24,49,50,51,53,55,56,62,66,67,68,69,70,71,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,106,107,108,109,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'mul_expr':([0,1,17,22,24,49,50,51,53,55,56,62,66,67,68,69,70,71,72,73,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,110,111,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'unary_expr':([0,1,17,22,24,49,50,51,53,55,56,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,113,114,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'sqbr_expr':([0,1,17,22,24,30,31,34,49,50,51,53,55,56,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[33,33,33,33,33,77,78,79,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'atom':([0,1,17,22,24,30,31,34,49,50,51,53,55,56,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'fun_call':([0,1,17,22,24,30,31,34,49,50,51,53,55,56,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'var_ref':([0,1,17,22,24,30,31,34,49,50,51,53,55,56,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'literal':([0,1,17,22,24,30,31,34,49,50,51,53,55,56,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'list_literal':([0,1,17,22,24,30,31,34,49,50,51,53,55,56,62,66,67,68,69,70,71,72,73,74,75,76,80,93,97,99,102,103,116,118,120,123,125,131,135,142,144,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'id_list':([22,49,53,93,144,],[58,82,92,124,92,]),'simple_expr_list':([22,49,53,93,144,],[59,84,59,84,151,]),'fun_arg_list':([49,93,],[83,83,]),'kw_arg_list':([49,93,118,120,142,],[85,85,137,138,137,]),'kw_arg':([49,93,118,120,121,142,],[86,86,86,86,140,86,]),'expression':([50,51,],[87,90,]),'stmts_block':([63,130,132,135,],[101,145,147,150,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement_list","S'",1,None,None,None),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','parser.py',30),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',32),
  ('statement -> fun_def_stmt','statement',1,'p_statement','parser.py',41),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',42),
  ('statement -> loop_break_stmt','statement',1,'p_statement','parser.py',43),
  ('statement -> loop_continue_stmt','statement',1,'p_statement','parser.py',44),
  ('loop_break_stmt -> BREAK DELIM','loop_break_stmt',2,'p_loop_break_stmt','parser.py',49),
  ('loop_continue_stmt -> CONTINUE DELIM','loop_continue_stmt',2,'p_loop_continue_stmt','parser.py',53),
  ('expression_stmt -> simple_expression DELIM','expression_stmt',2,'p_expression_stmt','parser.py',58),
  ('expression_stmt -> complex_expression','expression_stmt',1,'p_expression_stmt','parser.py',59),
  ('expression_stmt -> var_def_stmt','expression_stmt',1,'p_expression_stmt','parser.py',60),
  ('expression_stmt -> var_defs_stmt','expression_stmt',1,'p_expression_stmt','parser.py',61),
  ('expression_stmt -> var_assign_stmt','expression_stmt',1,'p_expression_stmt','parser.py',62),
  ('var_assign_stmt -> ID ASSIGN expression DELIM','var_assign_stmt',4,'p_var_assign_stmt','parser.py',66),
  ('var_def_stmt -> var_def DELIM','var_def_stmt',2,'p_var_def_stmt','parser.py',70),
  ('var_def -> ID DEFINE expression','var_def',3,'p_var_def','parser.py',74),
  ('var_defs_stmt -> LSQBR id_list RSQBR DEFINE LSQBR simple_expr_list RSQBR DELIM','var_defs_stmt',8,'p_var_defs_stmt','parser.py',78),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',82),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',83),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',88),
  ('expression -> complex_expression','expression',1,'p_expression','parser.py',89),
  ('simple_expr_list -> simple_expression','simple_expr_list',1,'p_simple_expr_list','parser.py',94),
  ('simple_expr_list -> simple_expr_list COMMA simple_expression','simple_expr_list',3,'p_simple_expr_list','parser.py',95),
  ('simple_expr_list -> id_list','simple_expr_list',1,'p_simple_expr_list','parser.py',96),
  ('simple_expr_list -> id_list COMMA simple_expression','simple_expr_list',3,'p_simple_expr_list','parser.py',97),
  ('simple_expression -> or_expr','simple_expression',1,'p_simple_expression','parser.py',123),
  ('simple_expression -> or_expr COND simple_expression COND_ELSE simple_expression','simple_expression',5,'p_simple_expression','parser.py',124),
  ('or_expr -> and_expr','or_expr',1,'p_or_expr','parser.py',131),
  ('or_expr -> or_expr OR and_expr','or_expr',3,'p_or_expr','parser.py',132),
  ('and_expr -> eq_expr','and_expr',1,'p_and_expr','parser.py',136),
  ('and_expr -> and_expr AND eq_expr','and_expr',3,'p_and_expr','parser.py',137),
  ('eq_expr -> cmp_expr','eq_expr',1,'p_eq_expr','parser.py',141),
  ('eq_expr -> cmp_expr EQ cmp_expr','eq_expr',3,'p_eq_expr','parser.py',142),
  ('eq_expr -> cmp_expr NEQ cmp_expr','eq_expr',3,'p_eq_expr','parser.py',143),
  ('cmp_expr -> add_expr','cmp_expr',1,'p_cmp_expr','parser.py',147),
  ('cmp_expr -> add_expr GT add_expr','cmp_expr',3,'p_cmp_expr','parser.py',148),
  ('cmp_expr -> add_expr GE add_expr','cmp_expr',3,'p_cmp_expr','parser.py',149),
  ('cmp_expr -> add_expr LT add_expr','cmp_expr',3,'p_cmp_expr','parser.py',150),
  ('cmp_expr -> add_expr LE add_expr','cmp_expr',3,'p_cmp_expr','parser.py',151),
  ('add_expr -> mul_expr','add_expr',1,'p_add_expr','parser.py',155),
  ('add_expr -> add_expr PLUS mul_expr','add_expr',3,'p_add_expr','parser.py',156),
  ('add_expr -> add_expr MINUS mul_expr','add_expr',3,'p_add_expr','parser.py',157),
  ('mul_expr -> unary_expr','mul_expr',1,'p_mul_expr','parser.py',161),
  ('mul_expr -> mul_expr MUL unary_expr','mul_expr',3,'p_mul_expr','parser.py',162),
  ('mul_expr -> mul_expr DIV unary_expr','mul_expr',3,'p_mul_expr','parser.py',163),
  ('mul_expr -> mul_expr MOD unary_expr','mul_expr',3,'p_mul_expr','parser.py',164),
  ('unary_expr -> sqbr_expr','unary_expr',1,'p_unary_expr','parser.py',171),
  ('unary_expr -> NOT sqbr_expr','unary_expr',2,'p_unary_expr','parser.py',172),
  ('unary_expr -> PLUS sqbr_expr','unary_expr',2,'p_unary_expr','parser.py',173),
  ('unary_expr -> MINUS sqbr_expr','unary_expr',2,'p_unary_expr','parser.py',174),
  ('sqbr_expr -> atom','sqbr_expr',1,'p_sqbr_expr','parser.py',181),
  ('sqbr_expr -> atom LSQBR simple_expression RSQBR','sqbr_expr',4,'p_sqbr_expr','parser.py',182),
  ('atom -> fun_call','atom',1,'p_atom','parser.py',186),
  ('atom -> var_ref','atom',1,'p_atom','parser.py',187),
  ('atom -> literal','atom',1,'p_atom','parser.py',188),
  ('atom -> LPAR simple_expression RPAR','atom',3,'p_atom','parser.py',189),
  ('var_ref -> ID','var_ref',1,'p_var_ref','parser.py',196),
  ('fun_call -> ID LPAR fun_arg_list RPAR','fun_call',4,'p_fun_call','parser.py',200),
  ('fun_arg_list -> <empty>','fun_arg_list',0,'p_fun_arg_list','parser.py',204),
  ('fun_arg_list -> simple_expr_list','fun_arg_list',1,'p_fun_arg_list','parser.py',205),
  ('fun_arg_list -> kw_arg_list','fun_arg_list',1,'p_fun_arg_list','parser.py',206),
  ('fun_arg_list -> simple_expr_list COMMA kw_arg_list','fun_arg_list',3,'p_fun_arg_list','parser.py',207),
  ('fun_arg_list -> id_list COMMA kw_arg_list','fun_arg_list',3,'p_fun_arg_list','parser.py',208),
  ('kw_arg_list -> kw_arg','kw_arg_list',1,'p_kw_arg_list','parser.py',229),
  ('kw_arg_list -> kw_arg_list COMMA kw_arg','kw_arg_list',3,'p_kw_arg_list','parser.py',230),
  ('kw_arg -> ID DEFINE simple_expression','kw_arg',3,'p_kw_arg','parser.py',239),
  ('literal -> INT_LITERAL','literal',1,'p_literal','parser.py',243),
  ('literal -> FLOAT_LITERAL','literal',1,'p_literal','parser.py',244),
  ('literal -> STR_LITERAL','literal',1,'p_literal','parser.py',245),
  ('literal -> BOOL_LITERAL','literal',1,'p_literal','parser.py',246),
  ('literal -> COLOR_LITERAL','literal',1,'p_literal','parser.py',247),
  ('literal -> list_literal','literal',1,'p_literal','parser.py',248),
  ('list_literal -> LSQBR simple_expr_list RSQBR','list_literal',3,'p_list_leteral','parser.py',252),
  ('complex_expression -> if_expr','complex_expression',1,'p_complex_expression','parser.py',257),
  ('complex_expression -> for_expr','complex_expression',1,'p_complex_expression','parser.py',258),
  ('if_expr -> IF_COND simple_expression stmts_block','if_expr',3,'p_if_expr','parser.py',262),
  ('if_expr -> IF_COND simple_expression stmts_block IF_COND_ELSE stmts_block','if_expr',5,'p_if_expr','parser.py',263),
  ('for_expr -> FOR_STMT var_def FOR_STMT_TO simple_expression stmts_block','for_expr',5,'p_for_expr','parser.py',270),
  ('for_expr -> FOR_STMT var_def FOR_STMT_TO simple_expression FOR_STMT_BY','for_expr',5,'p_for_expr','parser.py',271),
  ('stmts_block -> BEGIN statement_list END','stmts_block',3,'p_stmts_block','parser.py',275),
  ('fun_def_stmt -> fun_def_stmt_1','fun_def_stmt',1,'p_fun_def_stmt','parser.py',281),
  ('fun_def_stmt -> fun_def_stmt_m','fun_def_stmt',1,'p_fun_def_stmt','parser.py',282),
  ('fun_def_stmt_1 -> ID LPAR id_list RPAR ARROW simple_expression DELIM','fun_def_stmt_1',7,'p_fun_def_stmt_1','parser.py',286),
  ('fun_def_stmt_m -> ID LPAR id_list RPAR ARROW stmts_block','fun_def_stmt_m',6,'p_fun_def_stmt_m','parser.py',290),
]
