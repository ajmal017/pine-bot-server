
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightUPLUSUMINUSAND ARROW ASSIGN BEGIN BOOL_LITERAL BREAK COLOR_LITERAL COMMA COND COND_ELSE CONTINUE DEFINE DELIM DIV END EQ FLOAT_LITERAL FOR_STMT FOR_STMT_BY FOR_STMT_TO GE GT ID IF_COND IF_COND_ELSE INT_LITERAL LE LPAR LSQBR LT MINUS MOD MUL NEQ NOT OR PLUS RPAR RSQBR STR_LITERALstatement_list :\n                      | statement\n                      | statement_list statementstatement : fun_def_stmt\n                 | expression_stmt\n                 | loop_break_stmt\n                 | loop_continue_stmtloop_break_stmt : BREAK DELIMloop_continue_stmt : CONTINUE DELIMexpression_stmt : simple_expression DELIM\n                       | complex_expression\n                       | var_def_stmt\n                       | var_defs_stmt\n                       | var_assign_stmtvar_assign_stmt : ID ASSIGN expression DELIMvar_def_stmt : var_def DELIMvar_def : ID DEFINE expressionvar_defs_stmt : LSQBR id_list RSQBR DEFINE LSQBR simple_expr_list RSQBR DELIMid_list : ID\n               | id_list COMMA IDexpression : simple_expression\n                  | complex_expressionsimple_expr_list : simple_expression\n                        | simple_expr_list COMMA simple_expression\n                        | id_list\n                        | id_list COMMA simple_expressionsimple_expression : or_expr\n                         | or_expr COND simple_expression COND_ELSE simple_expressionor_expr : and_expr\n               | or_expr OR and_exprand_expr : eq_expr\n                | and_expr AND eq_expreq_expr : cmp_expr\n               | cmp_expr EQ cmp_expr\n               | cmp_expr NEQ cmp_exprcmp_expr : add_expr\n                | add_expr GT add_expr\n                | add_expr GE add_expr\n                | add_expr LT add_expr\n                | add_expr LE add_expradd_expr : mul_expr\n                | add_expr PLUS mul_expr\n                | add_expr MINUS mul_exprmul_expr : unary_expr\n                | mul_expr MUL unary_expr\n                | mul_expr DIV unary_expr\n                | mul_expr MOD unary_exprunary_expr : sqbr_expr\n                  | NOT sqbr_expr\n                  | PLUS sqbr_expr %prec UPLUS\n                  | MINUS sqbr_expr %prec UMINUSsqbr_expr : atom\n                 | atom LSQBR simple_expression RSQBRatom : fun_call\n            | var_ref\n            | literal\n            | LPAR simple_expression RPARvar_ref : IDfun_call : ID LPAR fun_arg_list RPARfun_arg_list : simple_expr_list\n                    | kw_arg_list\n                    | simple_expr_list COMMA kw_arg_list\n                    | id_list COMMA kw_arg_listkw_arg_list : kw_arg\n                   | kw_arg_list COMMA kw_argkw_arg : ID DEFINE simple_expressionliteral : INT_LITERAL\n               | FLOAT_LITERAL\n               | STR_LITERAL\n               | BOOL_LITERAL\n               | COLOR_LITERALcomplex_expression : if_expr\n                          | for_exprif_expr : IF_COND simple_expression stmts_block\n               | IF_COND simple_expression stmts_block IF_COND_ELSE stmts_blockfor_expr : FOR_STMT var_def FOR_STMT_TO simple_expression stmts_block\n                | FOR_STMT var_def FOR_STMT_TO simple_expression FOR_STMT_BYstmts_block : BEGIN statement_list ENDfun_def_stmt : fun_def_stmt_1\n                    | fun_def_stmt_mfun_def_stmt_1 : ID LPAR id_list RPAR ARROW simple_expression DELIMfun_def_stmt_m : ID LPAR id_list RPAR ARROW stmts_block'
    
_lr_action_items = {'BREAK':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,44,45,46,47,55,95,96,116,122,138,139,140,141,143,147,152,],[14,14,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,-72,-73,-3,-10,-8,-9,-16,-74,14,-15,14,-75,-78,-76,-77,-82,-81,-18,]),'CONTINUE':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,44,45,46,47,55,95,96,116,122,138,139,140,141,143,147,152,],[15,15,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,-72,-73,-3,-10,-8,-9,-16,-74,15,-15,15,-75,-78,-76,-77,-82,-81,-18,]),'ID':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,22,24,25,30,31,34,44,45,46,47,48,49,50,53,54,55,58,62,63,64,65,66,67,68,69,70,71,72,76,89,93,95,96,97,110,112,114,115,116,118,122,126,135,137,138,139,140,141,143,147,148,150,152,],[16,16,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,52,-72,-73,57,52,61,52,52,52,-3,-10,-8,-9,77,52,52,52,52,-16,52,52,52,52,52,52,52,52,52,52,52,52,52,77,120,-74,16,52,52,127,132,134,-15,52,16,52,127,146,-75,-78,-76,-77,-82,-81,151,52,-18,]),'LSQBR':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,19,20,35,36,37,38,39,40,41,42,43,44,45,46,47,52,55,77,88,95,96,113,116,119,122,127,132,138,139,140,141,143,146,147,151,152,],[22,22,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,-58,-72,-73,76,-54,-55,-56,-67,-68,-69,-70,-71,-3,-10,-8,-9,-58,-16,-58,-57,-74,22,-59,-15,137,22,-58,-58,-75,-78,-76,-77,-82,-58,-81,-58,-18,]),'IF_COND':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,44,45,46,47,49,50,55,95,96,116,122,138,139,140,141,143,147,152,],[24,24,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,-72,-73,-3,-10,-8,-9,24,24,-16,-74,24,-15,24,-75,-78,-76,-77,-82,-81,-18,]),'FOR_STMT':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,44,45,46,47,49,50,55,95,96,116,122,138,139,140,141,143,147,152,],[25,25,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,-72,-73,-3,-10,-8,-9,25,25,-16,-74,25,-15,25,-75,-78,-76,-77,-82,-81,-18,]),'NOT':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,24,44,45,46,47,48,49,50,53,54,55,58,62,63,64,65,66,67,68,69,70,71,72,76,89,95,96,97,110,112,114,116,118,122,126,135,137,138,139,140,141,143,147,148,150,152,],[34,34,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,34,-72,-73,34,-3,-10,-8,-9,34,34,34,34,34,-16,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-74,34,34,34,34,34,-15,34,34,34,34,34,-75,-78,-76,-77,-82,-81,34,34,-18,]),'PLUS':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,24,28,29,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,58,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,88,89,95,96,97,100,101,102,103,104,105,106,107,108,110,112,113,114,116,118,122,124,126,127,132,135,137,138,139,140,141,143,146,147,148,150,151,152,],[30,30,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,-58,30,-72,-73,30,68,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-3,-10,-8,-9,30,30,30,-58,30,30,-16,30,30,30,30,30,30,30,30,30,30,30,30,-50,-51,-49,30,-58,-57,30,-74,30,30,68,68,68,68,-42,-43,-45,-46,-47,30,30,-59,30,-15,30,30,-53,30,-58,-58,30,30,-75,-78,-76,-77,-82,-58,-81,30,30,-58,-18,]),'MINUS':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,24,28,29,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,58,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,88,89,95,96,97,100,101,102,103,104,105,106,107,108,110,112,113,114,116,118,122,124,126,127,132,135,137,138,139,140,141,143,146,147,148,150,151,152,],[31,31,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,-58,31,-72,-73,31,69,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-3,-10,-8,-9,31,31,31,-58,31,31,-16,31,31,31,31,31,31,31,31,31,31,31,31,-50,-51,-49,31,-58,-57,31,-74,31,31,69,69,69,69,-42,-43,-45,-46,-47,31,31,-59,31,-15,31,31,-53,31,-58,-58,31,31,-75,-78,-76,-77,-82,-58,-81,31,31,-58,-18,]),'LPAR':([0,1,2,3,4,5,6,7,8,10,11,12,13,16,17,19,20,24,30,31,34,44,45,46,47,48,49,50,52,53,54,55,58,62,63,64,65,66,67,68,69,70,71,72,76,77,89,95,96,97,110,112,114,116,118,122,126,127,132,135,137,138,139,140,141,143,146,147,148,150,151,152,],[17,17,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,48,17,-72,-73,17,17,17,17,-3,-10,-8,-9,17,17,17,89,17,17,-16,17,17,17,17,17,17,17,17,17,17,17,17,17,89,17,-74,17,17,17,17,17,-15,17,17,17,89,89,17,17,-75,-78,-76,-77,-82,89,-81,17,17,89,-18,]),'INT_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,24,30,31,34,44,45,46,47,48,49,50,53,54,55,58,62,63,64,65,66,67,68,69,70,71,72,76,89,95,96,97,110,112,114,116,118,122,126,135,137,138,139,140,141,143,147,148,150,152,],[39,39,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,39,-72,-73,39,39,39,39,-3,-10,-8,-9,39,39,39,39,39,-16,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-74,39,39,39,39,39,-15,39,39,39,39,39,-75,-78,-76,-77,-82,-81,39,39,-18,]),'FLOAT_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,24,30,31,34,44,45,46,47,48,49,50,53,54,55,58,62,63,64,65,66,67,68,69,70,71,72,76,89,95,96,97,110,112,114,116,118,122,126,135,137,138,139,140,141,143,147,148,150,152,],[40,40,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,40,-72,-73,40,40,40,40,-3,-10,-8,-9,40,40,40,40,40,-16,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-74,40,40,40,40,40,-15,40,40,40,40,40,-75,-78,-76,-77,-82,-81,40,40,-18,]),'STR_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,24,30,31,34,44,45,46,47,48,49,50,53,54,55,58,62,63,64,65,66,67,68,69,70,71,72,76,89,95,96,97,110,112,114,116,118,122,126,135,137,138,139,140,141,143,147,148,150,152,],[41,41,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,41,-72,-73,41,41,41,41,-3,-10,-8,-9,41,41,41,41,41,-16,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-74,41,41,41,41,41,-15,41,41,41,41,41,-75,-78,-76,-77,-82,-81,41,41,-18,]),'BOOL_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,24,30,31,34,44,45,46,47,48,49,50,53,54,55,58,62,63,64,65,66,67,68,69,70,71,72,76,89,95,96,97,110,112,114,116,118,122,126,135,137,138,139,140,141,143,147,148,150,152,],[42,42,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,42,-72,-73,42,42,42,42,-3,-10,-8,-9,42,42,42,42,42,-16,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-74,42,42,42,42,42,-15,42,42,42,42,42,-75,-78,-76,-77,-82,-81,42,42,-18,]),'COLOR_LITERAL':([0,1,2,3,4,5,6,7,8,10,11,12,13,17,19,20,24,30,31,34,44,45,46,47,48,49,50,53,54,55,58,62,63,64,65,66,67,68,69,70,71,72,76,89,95,96,97,110,112,114,116,118,122,126,135,137,138,139,140,141,143,147,148,150,152,],[43,43,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,43,-72,-73,43,43,43,43,-3,-10,-8,-9,43,43,43,43,43,-16,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-74,43,43,43,43,43,-15,43,43,43,43,43,-75,-78,-76,-77,-82,-81,43,43,-18,]),'$end':([0,1,2,3,4,5,6,7,8,10,11,12,13,19,20,44,45,46,47,55,95,116,138,139,140,141,143,147,152,],[-1,0,-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,-72,-73,-3,-10,-8,-9,-16,-74,-15,-75,-78,-76,-77,-82,-81,-18,]),'END':([2,3,4,5,6,7,8,10,11,12,13,19,20,44,45,46,47,55,95,96,116,122,138,139,140,141,143,147,152,],[-2,-4,-5,-6,-7,-79,-80,-11,-12,-13,-14,-72,-73,-3,-10,-8,-9,-16,-74,-1,-15,139,-75,-78,-76,-77,-82,-81,-18,]),'DELIM':([9,14,15,16,18,19,20,21,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,84,85,86,87,88,91,94,95,98,99,100,101,102,103,104,105,106,107,108,113,124,136,138,139,140,141,142,149,],[45,46,47,-58,-27,-72,-73,55,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,116,-21,-22,-17,-57,-30,-32,-74,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-28,-75,-78,-76,-77,147,152,]),'ASSIGN':([16,],[49,]),'DEFINE':([16,61,77,92,127,132,134,],[50,50,110,119,110,110,110,]),'MUL':([16,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,104,105,106,107,108,113,124,127,132,146,151,],[-58,70,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,70,70,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'DIV':([16,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,104,105,106,107,108,113,124,127,132,146,151,],[-58,71,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,71,71,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'MOD':([16,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,104,105,106,107,108,113,124,127,132,146,151,],[-58,72,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,72,72,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'GT':([16,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,104,105,106,107,108,113,124,127,132,146,151,],[-58,64,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,-42,-43,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'GE':([16,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,104,105,106,107,108,113,124,127,132,146,151,],[-58,65,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,-42,-43,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'LT':([16,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,104,105,106,107,108,113,124,127,132,146,151,],[-58,66,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,-42,-43,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'LE':([16,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,104,105,106,107,108,113,124,127,132,146,151,],[-58,67,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,-42,-43,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'EQ':([16,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,100,101,102,103,104,105,106,107,108,113,124,127,132,146,151,],[-58,62,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'NEQ':([16,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,100,101,102,103,104,105,106,107,108,113,124,127,132,146,151,],[-58,63,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'AND':([16,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,91,94,98,99,100,101,102,103,104,105,106,107,108,113,124,127,132,146,151,],[-58,58,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,58,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'COND':([16,18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,91,94,98,99,100,101,102,103,104,105,106,107,108,113,124,127,132,146,151,],[-58,53,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'OR':([16,18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,77,88,91,94,98,99,100,101,102,103,104,105,106,107,108,113,124,127,132,146,151,],[-58,54,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-58,-57,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-58,-58,-58,-58,]),'RPAR':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,51,52,73,74,75,77,78,79,80,81,82,83,88,91,94,98,99,100,101,102,103,104,105,106,107,108,113,117,124,125,127,128,129,130,131,132,133,136,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,88,-58,-50,-51,-49,-19,111,-23,113,-60,-61,-64,-57,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-25,-53,-66,-20,-63,-26,-62,-24,-58,-65,-28,]),'BEGIN':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,59,73,74,75,88,91,94,98,99,100,101,102,103,104,105,106,107,108,113,121,123,124,126,136,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,96,-50,-51,-49,-57,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,96,96,-53,96,-28,]),'COMMA':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,56,57,73,74,75,77,78,79,81,82,83,88,91,94,98,99,100,101,102,103,104,105,106,107,108,113,117,120,124,125,127,128,129,130,131,132,133,136,144,145,146,151,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,93,-19,-50,-51,-49,-19,112,-23,114,115,-64,-57,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,135,-20,-53,-66,-20,115,-26,115,-24,-58,-65,-28,148,150,-19,-20,]),'FOR_STMT_TO':([18,19,20,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,60,73,74,75,85,86,87,88,91,94,95,98,99,100,101,102,103,104,105,106,107,108,113,124,136,138,139,140,141,],[-27,-72,-73,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,97,-50,-51,-49,-21,-22,-17,-57,-30,-32,-74,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-28,-75,-78,-76,-77,]),'COND_ELSE':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,88,90,91,94,98,99,100,101,102,103,104,105,106,107,108,113,124,136,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-57,118,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,-53,-28,]),'RSQBR':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,56,57,73,74,75,79,88,91,94,98,99,100,101,102,103,104,105,106,107,108,109,113,120,124,129,131,136,144,145,146,151,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,92,-19,-50,-51,-49,-23,-57,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,124,-59,-20,-53,-26,-24,-28,-25,149,-19,-20,]),'FOR_STMT_BY':([18,23,26,27,28,29,32,33,35,36,37,38,39,40,41,42,43,52,73,74,75,88,91,94,98,99,100,101,102,103,104,105,106,107,108,113,123,124,136,],[-27,-29,-31,-33,-36,-41,-44,-48,-52,-54,-55,-56,-67,-68,-69,-70,-71,-58,-50,-51,-49,-57,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-47,-59,141,-53,-28,]),'IF_COND_ELSE':([95,139,],[121,-78,]),'ARROW':([111,],[126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,96,],[1,122,]),'statement':([0,1,96,122,],[2,44,2,44,]),'fun_def_stmt':([0,1,96,122,],[3,3,3,3,]),'expression_stmt':([0,1,96,122,],[4,4,4,4,]),'loop_break_stmt':([0,1,96,122,],[5,5,5,5,]),'loop_continue_stmt':([0,1,96,122,],[6,6,6,6,]),'fun_def_stmt_1':([0,1,96,122,],[7,7,7,7,]),'fun_def_stmt_m':([0,1,96,122,],[8,8,8,8,]),'simple_expression':([0,1,17,24,48,49,50,53,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[9,9,51,59,79,85,85,90,109,79,9,123,125,129,131,136,9,142,129,79,129,131,]),'complex_expression':([0,1,49,50,96,122,],[10,10,86,86,10,10,]),'var_def_stmt':([0,1,96,122,],[11,11,11,11,]),'var_defs_stmt':([0,1,96,122,],[12,12,12,12,]),'var_assign_stmt':([0,1,96,122,],[13,13,13,13,]),'or_expr':([0,1,17,24,48,49,50,53,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'if_expr':([0,1,49,50,96,122,],[19,19,19,19,19,19,]),'for_expr':([0,1,49,50,96,122,],[20,20,20,20,20,20,]),'var_def':([0,1,25,96,122,],[21,21,60,21,21,]),'and_expr':([0,1,17,24,48,49,50,53,54,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[23,23,23,23,23,23,23,23,91,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'eq_expr':([0,1,17,24,48,49,50,53,54,58,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[26,26,26,26,26,26,26,26,26,94,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'cmp_expr':([0,1,17,24,48,49,50,53,54,58,62,63,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[27,27,27,27,27,27,27,27,27,27,98,99,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'add_expr':([0,1,17,24,48,49,50,53,54,58,62,63,64,65,66,67,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[28,28,28,28,28,28,28,28,28,28,28,28,100,101,102,103,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'mul_expr':([0,1,17,24,48,49,50,53,54,58,62,63,64,65,66,67,68,69,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,104,105,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'unary_expr':([0,1,17,24,48,49,50,53,54,58,62,63,64,65,66,67,68,69,70,71,72,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,106,107,108,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'sqbr_expr':([0,1,17,24,30,31,34,48,49,50,53,54,58,62,63,64,65,66,67,68,69,70,71,72,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[33,33,33,33,73,74,75,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'atom':([0,1,17,24,30,31,34,48,49,50,53,54,58,62,63,64,65,66,67,68,69,70,71,72,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'fun_call':([0,1,17,24,30,31,34,48,49,50,53,54,58,62,63,64,65,66,67,68,69,70,71,72,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'var_ref':([0,1,17,24,30,31,34,48,49,50,53,54,58,62,63,64,65,66,67,68,69,70,71,72,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'literal':([0,1,17,24,30,31,34,48,49,50,53,54,58,62,63,64,65,66,67,68,69,70,71,72,76,89,96,97,110,112,114,118,122,126,135,137,148,150,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'id_list':([22,48,89,137,],[56,78,117,144,]),'fun_arg_list':([48,89,],[80,80,]),'simple_expr_list':([48,89,137,],[81,81,145,]),'kw_arg_list':([48,89,112,114,135,],[82,82,128,130,128,]),'kw_arg':([48,89,112,114,115,135,],[83,83,83,83,133,83,]),'expression':([49,50,],[84,87,]),'stmts_block':([59,121,123,126,],[95,138,140,143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement_list","S'",1,None,None,None),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','parser.py',29),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',30),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',31),
  ('statement -> fun_def_stmt','statement',1,'p_statement','parser.py',40),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',41),
  ('statement -> loop_break_stmt','statement',1,'p_statement','parser.py',42),
  ('statement -> loop_continue_stmt','statement',1,'p_statement','parser.py',43),
  ('loop_break_stmt -> BREAK DELIM','loop_break_stmt',2,'p_loop_break_stmt','parser.py',48),
  ('loop_continue_stmt -> CONTINUE DELIM','loop_continue_stmt',2,'p_loop_continue_stmt','parser.py',52),
  ('expression_stmt -> simple_expression DELIM','expression_stmt',2,'p_expression_stmt','parser.py',57),
  ('expression_stmt -> complex_expression','expression_stmt',1,'p_expression_stmt','parser.py',58),
  ('expression_stmt -> var_def_stmt','expression_stmt',1,'p_expression_stmt','parser.py',59),
  ('expression_stmt -> var_defs_stmt','expression_stmt',1,'p_expression_stmt','parser.py',60),
  ('expression_stmt -> var_assign_stmt','expression_stmt',1,'p_expression_stmt','parser.py',61),
  ('var_assign_stmt -> ID ASSIGN expression DELIM','var_assign_stmt',4,'p_var_assign_stmt','parser.py',65),
  ('var_def_stmt -> var_def DELIM','var_def_stmt',2,'p_var_def_stmt','parser.py',69),
  ('var_def -> ID DEFINE expression','var_def',3,'p_var_def','parser.py',73),
  ('var_defs_stmt -> LSQBR id_list RSQBR DEFINE LSQBR simple_expr_list RSQBR DELIM','var_defs_stmt',8,'p_var_defs_stmt','parser.py',77),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',81),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',82),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',87),
  ('expression -> complex_expression','expression',1,'p_expression','parser.py',88),
  ('simple_expr_list -> simple_expression','simple_expr_list',1,'p_simple_expr_list','parser.py',93),
  ('simple_expr_list -> simple_expr_list COMMA simple_expression','simple_expr_list',3,'p_simple_expr_list','parser.py',94),
  ('simple_expr_list -> id_list','simple_expr_list',1,'p_simple_expr_list','parser.py',95),
  ('simple_expr_list -> id_list COMMA simple_expression','simple_expr_list',3,'p_simple_expr_list','parser.py',96),
  ('simple_expression -> or_expr','simple_expression',1,'p_simple_expression','parser.py',122),
  ('simple_expression -> or_expr COND simple_expression COND_ELSE simple_expression','simple_expression',5,'p_simple_expression','parser.py',123),
  ('or_expr -> and_expr','or_expr',1,'p_or_expr','parser.py',130),
  ('or_expr -> or_expr OR and_expr','or_expr',3,'p_or_expr','parser.py',131),
  ('and_expr -> eq_expr','and_expr',1,'p_and_expr','parser.py',135),
  ('and_expr -> and_expr AND eq_expr','and_expr',3,'p_and_expr','parser.py',136),
  ('eq_expr -> cmp_expr','eq_expr',1,'p_eq_expr','parser.py',140),
  ('eq_expr -> cmp_expr EQ cmp_expr','eq_expr',3,'p_eq_expr','parser.py',141),
  ('eq_expr -> cmp_expr NEQ cmp_expr','eq_expr',3,'p_eq_expr','parser.py',142),
  ('cmp_expr -> add_expr','cmp_expr',1,'p_cmp_expr','parser.py',146),
  ('cmp_expr -> add_expr GT add_expr','cmp_expr',3,'p_cmp_expr','parser.py',147),
  ('cmp_expr -> add_expr GE add_expr','cmp_expr',3,'p_cmp_expr','parser.py',148),
  ('cmp_expr -> add_expr LT add_expr','cmp_expr',3,'p_cmp_expr','parser.py',149),
  ('cmp_expr -> add_expr LE add_expr','cmp_expr',3,'p_cmp_expr','parser.py',150),
  ('add_expr -> mul_expr','add_expr',1,'p_add_expr','parser.py',154),
  ('add_expr -> add_expr PLUS mul_expr','add_expr',3,'p_add_expr','parser.py',155),
  ('add_expr -> add_expr MINUS mul_expr','add_expr',3,'p_add_expr','parser.py',156),
  ('mul_expr -> unary_expr','mul_expr',1,'p_mul_expr','parser.py',160),
  ('mul_expr -> mul_expr MUL unary_expr','mul_expr',3,'p_mul_expr','parser.py',161),
  ('mul_expr -> mul_expr DIV unary_expr','mul_expr',3,'p_mul_expr','parser.py',162),
  ('mul_expr -> mul_expr MOD unary_expr','mul_expr',3,'p_mul_expr','parser.py',163),
  ('unary_expr -> sqbr_expr','unary_expr',1,'p_unary_expr','parser.py',170),
  ('unary_expr -> NOT sqbr_expr','unary_expr',2,'p_unary_expr','parser.py',171),
  ('unary_expr -> PLUS sqbr_expr','unary_expr',2,'p_unary_expr','parser.py',172),
  ('unary_expr -> MINUS sqbr_expr','unary_expr',2,'p_unary_expr','parser.py',173),
  ('sqbr_expr -> atom','sqbr_expr',1,'p_sqbr_expr','parser.py',180),
  ('sqbr_expr -> atom LSQBR simple_expression RSQBR','sqbr_expr',4,'p_sqbr_expr','parser.py',181),
  ('atom -> fun_call','atom',1,'p_atom','parser.py',185),
  ('atom -> var_ref','atom',1,'p_atom','parser.py',186),
  ('atom -> literal','atom',1,'p_atom','parser.py',187),
  ('atom -> LPAR simple_expression RPAR','atom',3,'p_atom','parser.py',188),
  ('var_ref -> ID','var_ref',1,'p_var_ref','parser.py',192),
  ('fun_call -> ID LPAR fun_arg_list RPAR','fun_call',4,'p_fun_call','parser.py',196),
  ('fun_arg_list -> simple_expr_list','fun_arg_list',1,'p_fun_arg_list','parser.py',200),
  ('fun_arg_list -> kw_arg_list','fun_arg_list',1,'p_fun_arg_list','parser.py',201),
  ('fun_arg_list -> simple_expr_list COMMA kw_arg_list','fun_arg_list',3,'p_fun_arg_list','parser.py',202),
  ('fun_arg_list -> id_list COMMA kw_arg_list','fun_arg_list',3,'p_fun_arg_list','parser.py',203),
  ('kw_arg_list -> kw_arg','kw_arg_list',1,'p_kw_arg_list','parser.py',222),
  ('kw_arg_list -> kw_arg_list COMMA kw_arg','kw_arg_list',3,'p_kw_arg_list','parser.py',223),
  ('kw_arg -> ID DEFINE simple_expression','kw_arg',3,'p_kw_arg','parser.py',232),
  ('literal -> INT_LITERAL','literal',1,'p_literal','parser.py',237),
  ('literal -> FLOAT_LITERAL','literal',1,'p_literal','parser.py',238),
  ('literal -> STR_LITERAL','literal',1,'p_literal','parser.py',239),
  ('literal -> BOOL_LITERAL','literal',1,'p_literal','parser.py',240),
  ('literal -> COLOR_LITERAL','literal',1,'p_literal','parser.py',241),
  ('complex_expression -> if_expr','complex_expression',1,'p_complex_expression','parser.py',246),
  ('complex_expression -> for_expr','complex_expression',1,'p_complex_expression','parser.py',247),
  ('if_expr -> IF_COND simple_expression stmts_block','if_expr',3,'p_if_expr','parser.py',251),
  ('if_expr -> IF_COND simple_expression stmts_block IF_COND_ELSE stmts_block','if_expr',5,'p_if_expr','parser.py',252),
  ('for_expr -> FOR_STMT var_def FOR_STMT_TO simple_expression stmts_block','for_expr',5,'p_for_expr','parser.py',259),
  ('for_expr -> FOR_STMT var_def FOR_STMT_TO simple_expression FOR_STMT_BY','for_expr',5,'p_for_expr','parser.py',260),
  ('stmts_block -> BEGIN statement_list END','stmts_block',3,'p_stmts_block','parser.py',264),
  ('fun_def_stmt -> fun_def_stmt_1','fun_def_stmt',1,'p_fun_def_stmt','parser.py',270),
  ('fun_def_stmt -> fun_def_stmt_m','fun_def_stmt',1,'p_fun_def_stmt','parser.py',271),
  ('fun_def_stmt_1 -> ID LPAR id_list RPAR ARROW simple_expression DELIM','fun_def_stmt_1',7,'p_fun_def_stmt_1','parser.py',275),
  ('fun_def_stmt_m -> ID LPAR id_list RPAR ARROW stmts_block','fun_def_stmt_m',6,'p_fun_def_stmt_m','parser.py',279),
]
